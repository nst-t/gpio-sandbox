{"version":3,"sources":["types.ts","dashboard/ListItems.tsx","dashboard/Title.tsx","dashboard/PinData.tsx","dashboard/Chart.tsx","dashboard/Pinout.tsx","dashboard/Dashboard.tsx","App.tsx","index.tsx"],"names":["PinIOStateType","PinType","MainListItems","openViews","updateViews","handler","name","ListItem","button","onClick","ListItemIcon","SettingsInputComponent","color","pins","ListItemText","primary","BarChart","data","Title","children","Typography","component","variant","gutterBottom","PinData","Table","size","TableHead","TableRow","TableCell","width","align","TableBody","sort","a","b","date","slice","map","index","id","value","Chart","theme","useTheme","displayFormattedData","filter","item","Date","now","d","Number","Box","height","sx","backgroundColor","ResponsiveContainer","LineChart","margin","top","right","bottom","left","XAxis","hide","dataKey","type","domain","stroke","palette","text","secondary","style","typography","body2","Label","position","textAnchor","fill","body1","YAxis","Line","isAnimationActive","main","dot","connectNulls","strokeLinejoin","gpio","Map","direction","GROUND","POWER","IO","PinIcon","IconButton","CircleTwoTone","Pinout","activePins","sendHandler","connected","setError","useState","setPins","useContext","GPIOContext","handleSetPinValue","useMemo","pin","get","set","action","handleSetDirection","newDirection","useEffect","dataPoints","Array","from","entries","forEach","dataId","length","TableContainer","Paper","flexGrow","includes","p","border","minWidth","cursor","paragraph","fontSize","ToggleButtonGroup","exclusive","lineHeight","onChange","event","wsHost","ToggleButton","disabled","OUT","newValue","undefined","display","flexDirection","Copyright","props","Link","href","getFullYear","AppBar","styled","MuiAppBar","zIndex","drawer","marginLeft","Drawer","MuiDrawer","whiteSpace","boxSizing","overflowX","breakpoints","up","spacing","dark","createTheme","mode","light","Dashboard","wsUrl","setWsUrl","setActivePins","tempPinsList","setTempPinsList","updatedWsUrl","setUpdatedWsUrl","setOpenViews","themePreference","setThemePreference","error","systemPrefersDarkMode","useMediaQuery","handleWsUrlChange","url","params","URLSearchParams","window","location","search","newUrl","URL","origin","decodeURIComponent","toString","history","pushState","console","log","handlePinsChange","list","replace","split","join","ThemeProvider","CssBaseline","Toolbar","noWrap","Switch","prev","alignItems","justifyContent","px","CastConnectedRounded","Divider","List","state","overflow","Container","maxWidth","mt","mb","Grid","container","xs","padding","TextField","label","e","target","onBlur","onKeyDown","key","toLowerCase","Boolean","fullWidth","maxHeight","pt","initialTimeSeriesData","createContext","App","setData","hostname","nstRef","useRef","setConnected","_","setSendHandler","current","nst","NstrumentaClient","apiKey","projectId","addListener","message","send","subscribe","pinData","prevData","concat","init","alert","query","wsUrlFromQuery","Provider","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.157b5ff3.chunk.js","sourcesContent":["export enum PinIOStateType {\n  IN = 'in',\n  OUT = 'out',\n}\n\nexport interface PinState {\n  name: string,\n  direction?: PinIOStateType | null,\n  type: PinType\n}\n\nexport interface PinData {\n  id: number,\n  value: number | null,\n  date: number,\n  direction?: PinIOStateType | null,\n}\n\nexport type PinTimeSeriesData = PinData[]\n\nexport interface CommandMessage {\n  action: 'read' | 'write' | 'set',\n  id: number,\n  value?: 1 | 0,\n  direction?: PinIOStateType | null,\n}\n\nexport type SendHandler = (args: CommandMessage) => void;\n\nexport enum PinType {\n  IO = 'io',\n  POWER = 'power',\n  GROUND = 'ground'\n}\n\nexport interface OpenViews {\n  pins: boolean,\n  data: boolean,\n}\n","import ListItem from '@mui/material/ListItem';\nimport ListItemIcon from '@mui/material/ListItemIcon';\nimport ListItemText from '@mui/material/ListItemText';\nimport { SettingsInputComponent, BarChart } from '@mui/icons-material';\nimport { MouseEventHandler } from 'react';\nimport { OpenViews } from '../types';\n\nexport const MainListItems = ({\n  openViews,\n  updateViews,\n}: { openViews: OpenViews, updateViews: (name: string, value: boolean) => void }) => {\n  const handler = (name: 'pins' | 'data'): MouseEventHandler => () => updateViews(name, !openViews[name]);\n\n  return (\n    <div>\n      <ListItem button onClick={handler('pins')}>\n        <ListItemIcon>\n          <SettingsInputComponent color={openViews.pins ? 'primary' : 'disabled'} />\n        </ListItemIcon>\n        <ListItemText primary=\"Dashboard\" />\n      </ListItem>\n      <ListItem button onClick={handler('data')}>\n        <ListItemIcon>\n          <BarChart color={openViews.data ? 'primary' : 'disabled'} />\n        </ListItemIcon>\n        <ListItemText primary=\"View Data\" />\n      </ListItem>\n    </div>\n  );\n};\n","import { ReactNode } from 'react';\nimport Typography from '@mui/material/Typography';\n\ninterface TitleProps {\n  children: ReactNode;\n}\n\nexport const Title = ({ children }: TitleProps) => (\n  <Typography component=\"h2\" variant=\"h6\" color=\"primary\" gutterBottom>\n    {children}\n  </Typography>\n);\n","import Table from '@mui/material/Table';\nimport TableBody from '@mui/material/TableBody';\nimport TableCell from '@mui/material/TableCell';\nimport TableHead from '@mui/material/TableHead';\nimport TableRow from '@mui/material/TableRow';\nimport { Title } from './Title';\nimport { PinTimeSeriesData } from '../types';\n\nexport const PinData = ({ data }: { data: PinTimeSeriesData }) => (\n  <>\n    <Title>GPIO Pin Data</Title>\n    <Table size=\"small\">\n      <TableHead>\n        <TableRow>\n          <TableCell width={100}>Pin Id</TableCell>\n          <TableCell width={100}>Time</TableCell>\n          <TableCell align=\"right\">Value</TableCell>\n        </TableRow>\n      </TableHead>\n      <TableBody>\n        {data\n          .sort((a, b) => b.date - a.date)\n          .slice(0, 25)\n          .map(({ id, date, value }, index) => (\n            // eslint-disable-next-line react/no-array-index-key\n            <TableRow key={`pin-${id}:${date}:${index}`}>\n              <TableCell>{id}</TableCell>\n              <TableCell>{date}</TableCell>\n              <TableCell align=\"right\">{value ? '1' : '0'}</TableCell>\n            </TableRow>\n          ))}\n      </TableBody>\n    </Table>\n  </>\n);\n","import * as React from 'react';\nimport { useTheme } from '@mui/material/styles';\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  Label,\n  ResponsiveContainer,\n} from 'recharts';\nimport Box from '@mui/material/Box';\nimport { PinTimeSeriesData } from '../types';\n\nexport type ChartMeta = {\n  maxTime: number;\n  minTime: number;\n  dataPoints: number;\n};\n\nexport const Chart = ({\n  data,\n  // meta,\n}: {\n  data: PinTimeSeriesData;\n  // meta: ChartMeta;\n}) => {\n  const theme = useTheme();\n  const displayInterval = 60 * 1000;\n\n  let displayFormattedData: PinTimeSeriesData = [];\n\n  if (data) {\n    displayFormattedData = data\n      .filter((item) => item.date > Date.now() - displayInterval)\n      .map((d) => ({\n        ...d,\n        value: d.value === null ? null : Number(d.value),\n      }));\n  }\n  return (\n    <Box width=\"100%\" height=\"100%\" sx={{ backgroundColor: 'primary' }}>\n      <ResponsiveContainer>\n        <LineChart\n          data={displayFormattedData}\n          margin={{\n            top: 0,\n            right: 0,\n            bottom: 0,\n            left: 0,\n          }}\n        >\n          <XAxis\n            hide\n            dataKey=\"date\"\n            type=\"number\"\n            domain={[Date.now() - displayInterval, Date.now()]}\n            stroke={theme.palette.text.secondary}\n            style={theme.typography.body2}\n          >\n            <Label\n              position=\"bottom\"\n              style={{\n                textAnchor: 'middle',\n                fill: theme.palette.text.primary,\n                ...theme.typography.body1,\n              }}\n            >\n              Time\n            </Label>\n          </XAxis>\n          <YAxis\n            hide\n            type=\"number\"\n            domain={[0, 1]}\n            stroke={theme.palette.text.secondary}\n            style={theme.typography.body2}\n          />\n          <Line\n            isAnimationActive={false}\n            type=\"stepAfter\"\n            dataKey=\"value\"\n            stroke={theme.palette.primary.main}\n            dot={false}\n            connectNulls={false}\n            strokeLinejoin=\"miter\"\n          />\n        </LineChart>\n      </ResponsiveContainer>\n    </Box>\n  );\n};\n","import React, {\n  Dispatch,\n  SetStateAction,\n  useContext,\n  useEffect,\n  useMemo,\n  useState,\n} from 'react';\nimport {\n  IconButton,\n  IconProps,\n  Paper,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableRow,\n  ToggleButton,\n  ToggleButtonGroup,\n  Typography,\n} from '@mui/material';\nimport { CircleTwoTone } from '@mui/icons-material';\nimport {\n  PinIOStateType,\n  PinState,\n  PinTimeSeriesData,\n  PinType,\n  SendHandler,\n} from '../types';\nimport { Chart } from './Chart';\nimport { GPIOContext } from '../App';\n\ninterface ExtendedPinState extends PinState {\n  value?: 1 | 0,\n  data?: PinTimeSeriesData,\n}\n\nexport const gpio: Map<number, ExtendedPinState> = new Map([\n  [1, {\n    name: 'pow3v3',\n    direction: null,\n    type: PinType.GROUND,\n  }],\n  [2, {\n    name: 'pow5v',\n    direction: null,\n    type: PinType.POWER,\n  }],\n  [3, {\n    name: 'gpio 2',\n    direction: null,\n    type: PinType.IO,\n  }],\n  [4, {\n    name: 'pow5v',\n    direction: null,\n    type: PinType.POWER,\n  }],\n  [5, {\n    name: 'gpio 3',\n    direction: null,\n    type: PinType.IO,\n  }],\n  [6, {\n    name: 'gnd',\n    direction: null,\n    type: PinType.GROUND,\n  }],\n  [7, {\n    name: 'gpio 4',\n    direction: null,\n    type: PinType.IO,\n  }],\n  [8, {\n    name: 'gpio uart',\n    direction: null,\n    type: PinType.IO,\n  }],\n  [9, {\n    name: 'gnd',\n    direction: null,\n    type: PinType.GROUND,\n  }],\n  [10, {\n    name: 'gpio uart',\n    direction: null,\n    type: PinType.IO,\n  }],\n  [11, {\n    name: 'gpio 17',\n    direction: null,\n    type: PinType.IO,\n  }],\n  [12, {\n    name: 'gpio pcm',\n    direction: null,\n    type: PinType.IO,\n  }],\n  [13, {\n    name: 'gpio 27',\n    direction: null,\n    type: PinType.IO,\n  }],\n  [14, {\n    name: 'gnd',\n    direction: null,\n    type: PinType.GROUND,\n  }],\n  [15, {\n    name: 'gpio 22',\n    direction: null,\n    type: PinType.IO,\n  }],\n  [16, {\n    name: 'gpio',\n    direction: null,\n    type: PinType.IO,\n  }],\n  [17, {\n    name: 'pow3v3',\n    direction: null,\n    type: PinType.POWER,\n  }],\n  [18, {\n    name: 'gpio',\n    direction: null,\n    type: PinType.IO,\n  }],\n  [19, {\n    name: 'gpio 10',\n    direction: null,\n    type: PinType.IO,\n  }],\n  [20, {\n    name: 'gnd',\n    direction: null,\n    type: PinType.IO,\n  }],\n  [21, {\n    name: 'gpio 9',\n    direction: null,\n    type: PinType.IO,\n  }],\n  [22, {\n    name: 'gpio',\n    direction: null,\n    type: PinType.IO,\n  }],\n  [23, {\n    name: 'gpio 11',\n    direction: null,\n    type: PinType.IO,\n  }],\n  [24, {\n    name: 'gpio spi',\n    direction: null,\n    type: PinType.IO,\n  }],\n  [25, {\n    name: 'gnd',\n    direction: null,\n    type: PinType.GROUND,\n  }],\n  [26, {\n    name: 'gpio spi',\n    direction: null,\n    type: PinType.IO,\n  }],\n  [27, {\n    name: 'gpio 0',\n    direction: null,\n    type: PinType.IO,\n  }],\n  [28, {\n    name: 'gpio i2c',\n    direction: null,\n    type: PinType.IO,\n  }],\n  [29, {\n    name: 'gpio 5',\n    direction: null,\n    type: PinType.IO,\n  }],\n  [30, {\n    name: 'gnd',\n    direction: null,\n    type: PinType.GROUND,\n  }],\n  [31, {\n    name: 'gpio 6',\n    direction: null,\n    type: PinType.IO,\n  }],\n  [32, {\n    name: 'gpio',\n    direction: null,\n    type: PinType.IO,\n  }],\n  [33, {\n    name: 'gpio 13',\n    direction: null,\n    type: PinType.IO,\n  }],\n  [34, {\n    name: 'gnd',\n    direction: null,\n    type: PinType.GROUND,\n  }],\n  [35, {\n    name: 'gpio 19',\n    direction: null,\n    type: PinType.IO,\n  }],\n  [36, {\n    name: 'gpio',\n    direction: null,\n    type: PinType.IO,\n  }],\n  [37, {\n    name: 'gpio 26',\n    direction: null,\n    type: PinType.IO,\n  }],\n  [38, {\n    name: 'gpio pcm',\n    direction: null,\n    type: PinType.IO,\n  }],\n  [39, {\n    name: 'gnd',\n    direction: null,\n    type: PinType.GROUND,\n  }],\n  [40, {\n    name: 'gpio pcm',\n    direction: null,\n    type: PinType.IO,\n  }]]);\n\nconst PinIcon = ({ onClick, type }: IconProps & { type: PinType }) => (\n  <IconButton onClick={onClick}>\n    <CircleTwoTone color={\n      type === PinType.IO\n        ? 'primary'\n        : type === PinType.POWER\n          ? 'secondary'\n          : 'disabled'\n    }\n    />\n  </IconButton>\n);\n\nexport const Pinout = ({\n  activePins,\n  sendHandler,\n  connected,\n  setError,\n}: {\n  activePins: number[],\n  sendHandler: SendHandler,\n  connected: boolean,\n  setError: Dispatch<SetStateAction<Record<string, unknown>>>\n}) => {\n  const [pins, setPins] = useState(gpio);\n\n  const data = useContext(GPIOContext);\n\n  const handleSetPinValue = useMemo(() => ({ id, value }: { id: number, value: 1 | 0 }) => {\n    const pin = gpio.get(id);\n    if (!pin || pin.type !== 'io') {\n      return;\n    }\n\n    // update the react state\n    gpio.set(id, { ...pin, value });\n    setPins(new Map(gpio));\n\n    // send command to write the pin value\n    sendHandler({ id, value, action: 'write' });\n  }, [sendHandler]);\n  const handleSetDirection = useMemo(() => ({\n    id,\n    newDirection,\n  }: { id: number, newDirection: PinIOStateType | null }) => {\n    const pin = gpio.get(id);\n    if (!pin || pin.type !== 'io') {\n      return;\n    }\n    const direction = newDirection || pin.direction;\n    gpio.set(id, { ...pin, direction });\n    setPins(new Map(gpio));\n    sendHandler({ action: 'set', direction, id });\n  }, [sendHandler]);\n\n  useEffect(() => {\n    let dataPoints = 0;\n    Array.from(pins.entries()).forEach(([id, pin]) => {\n      // eslint-disable-next-line no-param-reassign\n      pin.data = data.filter(({ id: dataId }) => id === dataId);\n      if (pin.data.length > dataPoints) {\n        dataPoints = pin.data.length;\n      }\n    });\n  }, [data, pins]);\n\n  return (\n    <TableContainer component={Paper} sx={{ flexGrow: 1 }}>\n      <Table aria-label=\"GPIO Pinout\">\n        <colgroup>\n          <col style={{ width: 'auto' }} />\n          <col style={{ width: 'auto' }} />\n          <col style={{ width: 'auto' }} />\n          <col style={{ width: '24px' }} />\n          <col style={{ width: '80%' }} />\n        </colgroup>\n        <TableBody>\n          {Array.from(pins.entries())\n            .filter(activePins.length > 0 ? ([id]) => (activePins.includes(id)) : (p) => p)\n            .map(([id, pin]) => (\n              <TableRow\n                key={id}\n                sx={{ '&:last-child td, &:last-child th': { border: 0 } }}\n              >\n                <TableCell sx={{ minWidth: '100px', backgroundColor: 'default', cursor: 'pointer' }}>\n                  <Typography paragraph={false} fontSize={10}>\n                    [\n                    {id}\n                    ]\n                    {pin.name}\n                  </Typography>\n                </TableCell>\n                <TableCell align=\"left\">\n                  {pin.type === 'io'\n                  && (\n                    <ToggleButtonGroup\n                      size=\"small\"\n                      color=\"primary\"\n                      value={pin.direction}\n                      exclusive\n                      sx={{ fontSize: 6, height: '10px', lineHeight: '10px' }}\n                      onChange={\n                        (\n                          event: React.MouseEvent<HTMLElement>,\n                          newDirection: PinIOStateType | null,\n                        ) => {\n                          if (!connected) {\n                            setError({ wsHost: true });\n                            return;\n                          }\n                          handleSetDirection({\n                            id,\n                            newDirection,\n                          });\n                        }\n                      }\n                    >\n                      <ToggleButton sx={{ fontSize: 8 }} value=\"in\">In</ToggleButton>\n                      <ToggleButton sx={{ fontSize: 8 }} value=\"out\">Out</ToggleButton>\n                    </ToggleButtonGroup>\n                  )}\n                </TableCell>\n                <TableCell align=\"left\">\n                  {pin.type === 'io'\n                  && (\n                    <ToggleButtonGroup\n                      size=\"small\"\n                      color={pin.direction === 'out' ? 'primary' : 'secondary'}\n                      value={pin.value}\n                      exclusive\n                      sx={{ fontSize: 6, height: '10px', lineHeight: '10px' }}\n                      disabled={pin.direction !== PinIOStateType.OUT}\n                      onChange={(event: React.MouseEvent<HTMLElement>, newValue: 1 | 0 | null) => {\n                        if (!connected) return;\n\n                        const value = newValue === null ? pin.value : newValue;\n                        if (value === undefined) return;\n\n                        handleSetPinValue({\n                          id,\n                          value,\n                        });\n                      }}\n                    >\n                      <ToggleButton sx={{ fontSize: 8 }} value={1}>1</ToggleButton>\n                      <ToggleButton sx={{ fontSize: 8 }} value={0}>0</ToggleButton>\n                    </ToggleButtonGroup>\n                  )}\n                </TableCell>\n                <TableCell align=\"left\"><PinIcon type={pin.type} /></TableCell>\n                <TableCell align=\"right\">\n                  <Paper sx={{\n                    p: 2, display: 'flex', flexDirection: 'column', height: '80px', minWidth: '240px',\n                  }}\n                  >\n                    <Chart data={pin.data || []} />\n                  </Paper>\n                </TableCell>\n              </TableRow>\n            ))}\n        </TableBody>\n      </Table>\n    </TableContainer>\n  );\n};\n","import {\n  useContext, useEffect, useMemo, useState,\n} from 'react';\nimport { createTheme, styled, ThemeProvider } from '@mui/material/styles';\nimport CssBaseline from '@mui/material/CssBaseline';\nimport MuiDrawer from '@mui/material/Drawer';\nimport Box from '@mui/material/Box';\nimport MuiAppBar, { AppBarProps as MuiAppBarProps } from '@mui/material/AppBar';\nimport Toolbar from '@mui/material/Toolbar';\nimport List from '@mui/material/List';\nimport Typography from '@mui/material/Typography';\nimport Divider from '@mui/material/Divider';\nimport Container from '@mui/material/Container';\nimport Grid from '@mui/material/Grid';\nimport Paper from '@mui/material/Paper';\nimport Link from '@mui/material/Link';\nimport { Switch, TextField, useMediaQuery } from '@mui/material';\nimport { CastConnectedRounded } from '@mui/icons-material';\nimport { MainListItems } from './ListItems';\nimport { PinData } from './PinData';\nimport { Pinout } from './Pinout';\nimport { GPIOContext } from '../App';\nimport { OpenViews, SendHandler } from '../types';\n\nconst Copyright = (props: any) => (\n  <Typography variant=\"body2\" color=\"text.secondary\" align=\"center\" {...props}>\n    {'Copyright © '}\n    <Link color=\"inherit\" href=\"https://nstrumenta.com/\">\n      nstrumenta\n    </Link>\n    {' '}\n    {new Date().getFullYear()}\n    .\n  </Typography>\n);\n\nconst drawerWidth: number = 72;\n\ninterface AppBarProps extends MuiAppBarProps {\n}\n\nconst AppBar = styled(MuiAppBar, {})<AppBarProps>(({ theme }) => ({\n  zIndex: theme.zIndex.drawer + 1,\n  marginLeft: drawerWidth,\n  width: `calc(100% - ${drawerWidth}px)`,\n}));\n\nconst Drawer = styled(MuiDrawer, {})(\n  ({ theme }) => ({\n    '& .MuiDrawer-paper': {\n      position: 'relative',\n      whiteSpace: 'nowrap',\n      width: drawerWidth,\n      boxSizing: 'border-box',\n      overflowX: 'hidden',\n      [theme.breakpoints.up('sm')]: {\n        width: theme.spacing(9),\n      },\n    },\n  }),\n);\n\nconst theme = {\n  dark: createTheme({\n    palette: {\n      mode: 'dark',\n    },\n  }),\n  light: createTheme({\n    palette: {\n      mode: 'light',\n    },\n  }),\n};\n\n// const time = new Date(2021, 11, 20, 8, 0, 0);\n\nexport interface DashboardProps {\n  sendHandler: SendHandler,\n  wsUrl: string,\n  setWsUrl: (url: string) => void,\n  connected: boolean,\n}\n\nexport const Dashboard = ({\n  wsUrl,\n  setWsUrl,\n  connected,\n  sendHandler,\n}: DashboardProps) => {\n  const [activePins, setActivePins] = useState<number[]>([]);\n  const [tempPinsList, setTempPinsList] = useState<string>('');\n  const [updatedWsUrl, setUpdatedWsUrl] = useState<string>(wsUrl);\n  const [openViews, setOpenViews] = useState<OpenViews>({ pins: true, data: true });\n  const [themePreference, setThemePreference] = useState<'light' | 'dark'>('light');\n  const [error, setError] = useState<Record<string, unknown>>({});\n\n  const systemPrefersDarkMode = useMediaQuery('(prefers-color-scheme: dark)');\n  useEffect(() => {\n    setThemePreference(systemPrefersDarkMode ? 'dark' : 'light');\n  }, [systemPrefersDarkMode]);\n\n  useEffect(() => {\n    if (error.wsHost === undefined) return;\n\n    setError({ ...error, wsHost: !connected });\n  }, [connected, error]);\n\n  useEffect(() => {\n    setUpdatedWsUrl(wsUrl);\n  }, [wsUrl]);\n\n  const data = useContext(GPIOContext);\n\n  const handleWsUrlChange = useMemo(() => (url: string) => {\n    setWsUrl(url);\n    const params = new URLSearchParams(window.location.search);\n    params.set('wsUrl', url);\n    const newUrl = new URL(`${window.location.origin}?${decodeURIComponent(params.toString())}`);\n    window.history.pushState('', '', newUrl);\n    console.log(`updated wsUrl to ${url}`);\n  }, [setWsUrl]);\n\n  const updateViews = (name: string, state: boolean) => {\n    setOpenViews({ ...openViews, [name]: state });\n  };\n\n  // TODO: sendHandler is being passed through multiple levels of components; use context and hook\n\n  const handlePinsChange = useMemo(() => (list: string) => {\n    const enteredPins = list.replace(/\\s/g, '').split(',');\n    const pins = enteredPins.map(Number).filter((p) => (p > 0 && p <= 40));\n    console.log({ pins });\n    setActivePins(pins);\n  }, []);\n\n  useEffect(() => {\n    setTempPinsList(activePins.join(','));\n  }, [activePins]);\n\n  return (\n    <ThemeProvider theme={theme[themePreference]}>\n      <Box sx={{ display: 'flex' }}>\n        <CssBaseline />\n        <AppBar position=\"absolute\">\n\n          <Toolbar>\n            <Typography\n              component=\"h1\"\n              variant=\"h6\"\n              color=\"inherit\"\n              noWrap\n              sx={{ flexGrow: 1 }}\n            >\n              Raspberry PI GPIO\n            </Typography>\n            <Typography>Theme</Typography>\n            <Switch\n              value={themePreference}\n              onChange={() => setThemePreference((prev) => (prev === 'light' ? 'dark' : 'light'))}\n            />\n          </Toolbar>\n        </AppBar>\n        <Drawer variant=\"permanent\">\n          <Toolbar\n            sx={{\n              display: 'flex',\n              alignItems: 'center',\n              justifyContent: 'center',\n              px: [1],\n            }}\n          >\n            <CastConnectedRounded color={connected ? 'secondary' : 'disabled'} sx={{ backgroundColor: 'action' }} />\n          </Toolbar>\n\n          <Divider />\n          <List><MainListItems updateViews={updateViews} openViews={openViews} /></List>\n        </Drawer>\n\n        <Box\n          component=\"main\"\n          sx={{\n            flexGrow: 1,\n            height: '100vh',\n            overflow: 'auto',\n          }}\n        >\n          <Toolbar />\n          <Container maxWidth={false} sx={{ mt: 4, mb: 4 }}>\n            <Grid container spacing={3}>\n              {/* ws url entry */}\n              <Grid item xs={6}>\n                <Paper sx={{ padding: 2 }}>\n                  <TextField\n                    variant=\"standard\"\n                    label=\"websocket host\"\n                    onChange={(e) => setUpdatedWsUrl(e.target.value)}\n                    onBlur={() => handleWsUrlChange(updatedWsUrl)}\n                    value={updatedWsUrl}\n                    onKeyDown={(e) => {\n                      if (e.key.toLowerCase() === 'enter') handleWsUrlChange(updatedWsUrl);\n                    }}\n                    error={Boolean(error.wsHost)}\n                    fullWidth\n                  />\n                </Paper>\n              </Grid>\n              {/* filter pin list */}\n              <Grid item xs={6}>\n                <Paper sx={{ padding: 2 }}>\n                  <TextField\n                    variant=\"standard\"\n                    label=\"pin filter (comma separated list)\"\n                    onChange={(e) => setTempPinsList(e.target.value)}\n                    onBlur={() => handlePinsChange(tempPinsList)}\n                    value={tempPinsList}\n                    onKeyDown={(e) => {\n                      if (e.key.toLowerCase() === 'enter') handlePinsChange(tempPinsList);\n                    }}\n                    fullWidth\n                  />\n                </Paper>\n              </Grid>\n              {/* Pinout */}\n              {openViews.pins && (\n                <Grid item xs={12} sx={{ maxHeight: '60vh', padding: 2, overflow: 'auto' }}>\n                  <Paper\n                    sx={{\n                      p: 2,\n                      display: 'flex',\n                      flexDirection: 'column',\n                      width: '100%',\n                      height: '100%',\n                    }}\n                  >\n                    <Pinout\n                      activePins={activePins}\n                      connected={connected}\n                      sendHandler={sendHandler}\n                      setError={setError}\n                    />\n                  </Paper>\n                </Grid>\n              )}\n              {/* Recent PinData */}\n              <Grid item xs={12}>\n                <Paper sx={{ p: 2, display: 'flex', flexDirection: 'column' }}>\n                  <PinData data={data} />\n                </Paper>\n              </Grid>\n\n            </Grid>\n            <Copyright sx={{ pt: 4 }} />\n          </Container>\n        </Box>\n      </Box>\n    </ThemeProvider>\n  );\n};\n","import * as React from 'react';\n\nimport Box from '@mui/material/Box';\nimport { NstrumentaClient } from 'nstrumenta';\nimport {\n  createContext, useEffect, useRef, useState,\n} from 'react';\nimport {\n  PinData,\n  PinTimeSeriesData,\n  CommandMessage,\n  SendHandler,\n} from './types';\nimport { Dashboard } from './dashboard/Dashboard';\n\nconst CHANNEL = 'gpio';\nconst COMMAND_CHANNEL = 'gpio-command';\n\nconst initialTimeSeriesData: PinTimeSeriesData = [];\n\nexport const GPIOContext = createContext<PinTimeSeriesData>([]);\n\nexport const App = () => {\n  const [data, setData] = useState<PinTimeSeriesData>(initialTimeSeriesData);\n  const [wsUrl, setWsUrl] = useState(`ws://${window.location.hostname}:8088`);\n  const nstRef = useRef<NstrumentaClient>();\n  const [connected, setConnected] = useState(false);\n  const [sendHandler, setSendHandler] = useState<SendHandler>(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    () => () => (_: CommandMessage) => null,\n  );\n  // Set up nstrumenta listeners\n  useEffect(() => {\n    // TODO clean up previous NstrumentaClient and allow connection\n    if (nstRef.current) return;\n    try {\n      const nst = new NstrumentaClient({\n        apiKey: 'file?',\n        wsUrl,\n        projectId: 'mapbox-geo',\n      });\n      nstRef.current = nst;\n\n      nst.addListener('open', () => {\n        console.log('a connection is made!');\n        setConnected(true);\n        // Now that the connection is open, we can enable sending a message on user input\n        setSendHandler(() => (message: CommandMessage) => {\n          console.log('send message', message);\n          if (!message) {\n            console.log('nothing to send');\n            return;\n          }\n          nst.send(COMMAND_CHANNEL, {\n            action: message.action,\n            id: message.id,\n            value: message.value,\n            direction: message.direction,\n          });\n        });\n\n        nst.subscribe(CHANNEL, (pinData: PinData) => {\n          console.log('received message', pinData);\n          setData((prevData) => prevData.concat(pinData));\n        });\n      });\n\n      nst.addListener('close', () => {\n        console.log('lost ws connection');\n        setConnected(false);\n      });\n\n      nst.init();\n    } catch (e) {\n      console.log(e);\n      console.log(wsUrl);\n      // eslint-disable-next-line no-alert\n      alert('problem with the websocket url!');\n    }\n    // return () => nst.unsubscribe(CHANNEL);\n  }, [wsUrl]);\n\n  useEffect(() => {\n    const query = window.location.search;\n    const wsUrlFromQuery = new URLSearchParams(query).get('wsUrl');\n\n    if (wsUrlFromQuery) {\n      setWsUrl(wsUrlFromQuery);\n    }\n  }, []);\n\n  return (\n    <GPIOContext.Provider value={data}>\n      <Box>\n        <Dashboard\n          sendHandler={sendHandler}\n          wsUrl={wsUrl}\n          setWsUrl={setWsUrl}\n          connected={connected}\n        />\n      </Box>\n    </GPIOContext.Provider>\n  );\n};\n","import * as React from 'react';\nimport ReactDOM from 'react-dom';\nimport CssBaseline from '@mui/material/CssBaseline';\nimport { App } from './App';\n\n// @ts-ignore\nif (module.hot) {\n  // @ts-ignore\n  module.hot.accept();\n}\n\nReactDOM.render(\n  <>\n    {/* CssBaseline kickstart an elegant, consistent, and simple baseline to build upon. */}\n    <CssBaseline />\n    <App />\n  </>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}