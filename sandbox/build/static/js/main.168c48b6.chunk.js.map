{"version":3,"sources":["dashboard/listItems.tsx","dashboard/Title.tsx","dashboard/PinData.tsx","types.ts","dashboard/Chart.tsx","dashboard/Pinout.tsx","dashboard/Dashboard.tsx","App.tsx","index.tsx"],"names":["MainListItems","openViews","updateViews","handler","name","ListItem","button","onClick","ListItemIcon","SettingsInputComponent","color","pins","ListItemText","primary","BarChart","data","Title","props","Typography","component","variant","gutterBottom","children","PinData","Fragment","Table","size","TableHead","TableRow","TableCell","width","align","TableBody","map","index","id","date","value","PinIOStateType","PinType","Chart","theme","meta","useTheme","displayFormattedData","filter","item","Date","now","Number","Box","height","sx","backgroundColor","ResponsiveContainer","LineChart","margin","top","right","bottom","left","XAxis","hide","dataKey","type","domain","stroke","palette","text","secondary","style","typography","body2","Label","position","textAnchor","fill","body1","YAxis","Line","isAnimationActive","main","dot","connectNulls","strokeLinejoin","gpio","Map","direction","GROUND","POWER","IO","PinIcon","IconButton","CircleTwoTone","Pinout","sendHandler","connected","setError","useState","setPins","minTime","maxTime","dataPoints","chartMeta","setChartMeta","useContext","GPIOContext","handleSetPinValue","useMemo","pin","get","set","action","handleSetDirection","newDirection","useEffect","dataId","length","Array","from","entries","TableContainer","Paper","flexGrow","border","cursor","fontSize","ToggleButtonGroup","exclusive","lineHeight","onChange","event","wsHost","ToggleButton","disabled","OUT","newValue","undefined","p","display","flexDirection","Copyright","Link","href","getFullYear","AppBar","styled","MuiAppBar","zIndex","drawer","marginLeft","Drawer","MuiDrawer","whiteSpace","boxSizing","overflowX","breakpoints","up","spacing","dark","createTheme","mode","light","Dashboard","wsUrl","setWsUrl","updatedWsUrl","setUpdatedWsUrl","setOpenViews","themePreference","setThemePreference","error","ThemeProvider","CssBaseline","Toolbar","noWrap","Switch","prev","alignItems","justifyContent","px","CastConnectedRounded","Divider","List","state","console","log","overflow","Container","maxWidth","mt","mb","Grid","container","xs","padding","TextField","label","e","target","onBlur","onKeyDown","key","toLowerCase","Boolean","fullWidth","pt","initialTimeSeriesData","createContext","App","setData","window","location","hostname","setConnected","_","setSendHandler","nst","NstrumentaClient","apiKey","projectId","addListener","message","send","subscribe","pinData","prevData","concat","init","alert","Provider","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.168c48b6.chunk.js","sourcesContent":["import * as React from 'react';\nimport ListItem from '@mui/material/ListItem';\nimport ListItemIcon from '@mui/material/ListItemIcon';\nimport ListItemText from '@mui/material/ListItemText';\nimport { SettingsInputComponent, BarChart } from '@mui/icons-material';\nimport { OpenViews } from './Dashboard';\nimport { MouseEventHandler } from 'react';\n\nexport const MainListItems = ({\n  openViews,\n  updateViews\n}: { openViews: OpenViews, updateViews: (name: string, state: boolean) => void }) => {\n  const handler = (name: 'pins' | 'data'): MouseEventHandler => () => updateViews(name, !openViews[name]);\n\n  return (\n    <div>\n      <ListItem button onClick={handler('pins')} >\n        <ListItemIcon>\n          <SettingsInputComponent color={openViews.pins ? 'primary' : 'disabled'} />\n        </ListItemIcon>\n        <ListItemText primary=\"Dashboard\"/>\n      </ListItem>\n      <ListItem button onClick={handler('data')}>\n        <ListItemIcon>\n          <BarChart color={openViews.data ? 'primary' : 'disabled'}/>\n        </ListItemIcon>\n        <ListItemText primary=\"View Data\"/>\n      </ListItem>\n    </div>\n  )\n};\n","import * as React from 'react';\nimport Typography from '@mui/material/Typography';\n\ninterface TitleProps {\n  children?: React.ReactNode;\n}\n\nexport default function Title(props: TitleProps) {\n  return (\n    <Typography component=\"h2\" variant=\"h6\" color=\"primary\" gutterBottom>\n      {props.children}\n    </Typography>\n  );\n}\n","import React from 'react';\nimport Table from \"@mui/material/Table\";\nimport TableBody from \"@mui/material/TableBody\";\nimport TableCell from \"@mui/material/TableCell\";\nimport TableHead from \"@mui/material/TableHead\";\nimport TableRow from \"@mui/material/TableRow\";\nimport Title from \"./Title\";\nimport { PinTimeSeriesData } from '../types';\n\nexport default function PinData({ data }: { data: PinTimeSeriesData }) {\n  return (\n    <React.Fragment>\n      <Title>GPIO Pin Data</Title>\n      <Table size=\"small\">\n        <TableHead>\n          <TableRow>\n            <TableCell width={100}>Pin Id</TableCell>\n            <TableCell width={100}>Time</TableCell>\n            <TableCell align=\"right\">Value</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {data.map(({ id, date, value }, index) => {\n            return (\n              <TableRow key={index}>\n                <TableCell>{id}</TableCell>\n                <TableCell>{date}</TableCell>\n                <TableCell align=\"right\">{value ? '1' : '0'}</TableCell>\n              </TableRow>\n            );\n          })}\n        </TableBody>\n      </Table>\n    </React.Fragment>\n  );\n}\n","export enum PinIOStateType {\n  IN = 'in',\n  OUT = 'out',\n}\n\nexport interface PinState {\n  name: string,\n  direction?: PinIOStateType | null,\n  type: PinType\n}\n\nexport interface PinData {\n  id: number,\n  value: number | null,\n  date: number,\n  direction?: PinIOStateType | null,\n}\n\nexport type PinTimeSeriesData = PinData[]\n\nexport interface CommandMessage {\n  action: 'read' | 'write' | 'set',\n  id: number,\n  value?: 1 | 0,\n  direction?: PinIOStateType | null,\n}\n\nexport type SendHandler = (args: CommandMessage) => void;\n\nexport enum PinType {\n  IO = 'io',\n  POWER = 'power',\n  GROUND = 'ground'\n}\n","import * as React from 'react';\nimport { useTheme } from '@mui/material/styles';\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  Label,\n  ResponsiveContainer,\n} from 'recharts';\nimport Title from './Title';\nimport { PinTimeSeriesData } from '../types';\nimport Box from '@mui/material/Box';\n\nexport type ChartMeta = {\n  maxTime: number;\n  minTime: number;\n  dataPoints: number;\n};\n\nexport default function Chart({\n  data,\n  meta,\n}: {\n  data: PinTimeSeriesData;\n  meta: ChartMeta;\n}) {\n  const theme = useTheme();\n  const displayInterval = 60 * 1000;\n\n  let displayFormattedData: PinTimeSeriesData = [];\n\n  if (data) {\n    displayFormattedData = data\n      .filter((item) => {\n        return item.date > Date.now() - displayInterval;\n      })\n      .map((data) => {\n        return {\n          ...data,\n          value: data.value === null ? null : Number(data.value),\n        };\n      });\n  }\n\n  const TroubleshootableLine = () => {\n    console.log('render line');\n    return (\n      <Line\n        isAnimationActive={false}\n        type=\"stepBefore\"\n        dataKey=\"value\"\n        stroke={theme.palette.primary.main}\n        dot={false}\n        connectNulls={false}\n        strokeLinejoin={'miter'}\n      />\n    );\n  };\n\n  return (\n    <Box width=\"100%\" height=\"100%\" sx={{ backgroundColor: 'primary' }}>\n      <ResponsiveContainer>\n        <LineChart\n          data={displayFormattedData}\n          margin={{\n            top: 0,\n            right: 0,\n            bottom: 0,\n            left: 0,\n          }}\n        >\n          <XAxis\n            hide\n            dataKey=\"date\"\n            type=\"number\"\n            domain={[Date.now() - displayInterval, Date.now()]}\n            stroke={theme.palette.text.secondary}\n            style={theme.typography.body2}\n          >\n            <Label\n              position=\"bottom\"\n              style={{\n                textAnchor: 'middle',\n                fill: theme.palette.text.primary,\n                ...theme.typography.body1,\n              }}\n            >\n              Time\n            </Label>\n          </XAxis>\n          <YAxis\n            hide\n            type=\"number\"\n            domain={[0, 1]}\n            stroke={theme.palette.text.secondary}\n            style={theme.typography.body2}\n          ></YAxis>\n          <Line\n            isAnimationActive={false}\n            type=\"stepBefore\"\n            dataKey=\"value\"\n            stroke={theme.palette.primary.main}\n            dot={false}\n            connectNulls={false}\n            strokeLinejoin={'miter'}\n          />\n        </LineChart>\n      </ResponsiveContainer>\n    </Box>\n  );\n}\n","import * as React from 'react';\nimport { useContext, useEffect, useMemo, useState } from 'react';\nimport {\n  IconButton,\n  IconProps,\n  Paper,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableRow,\n  ToggleButton,\n  ToggleButtonGroup,\n  Typography,\n} from '@mui/material';\nimport { CircleTwoTone } from '@mui/icons-material';\nimport { PinIOStateType, PinState, PinTimeSeriesData, PinType, SendHandler } from '../types';\nimport Chart, { ChartMeta } from './Chart';\nimport { GPIOContext } from '../App';\n\n\ninterface ExtendedPinState extends PinState {\n  value?: 1 | 0,\n  data?: PinTimeSeriesData,\n}\n\nexport const gpio: Map<number, ExtendedPinState> = new Map([\n  [1, {\n    name: 'pow3v3',\n    direction: null,\n    type: PinType.GROUND\n  }],\n  [2, {\n    name: 'pow5v',\n    direction: null,\n    type: PinType.POWER\n  }],\n  [3, {\n    name: 'gpio 2',\n    direction: null,\n    type: PinType.IO\n  }],\n  [4, {\n    name: 'pow5v',\n    direction: null,\n    type: PinType.POWER\n  }],\n  [5, {\n    name: 'gpio 3',\n    direction: null,\n    type: PinType.IO\n  }],\n  [6, {\n    name: 'gnd',\n    direction: null,\n    type: PinType.GROUND\n  }],\n  [7, {\n    name: 'gpio 4',\n    direction: null,\n    type: PinType.IO\n  }],\n  [8, {\n    name: 'gpio uart',\n    direction: null,\n    type: PinType.IO\n  }],\n  [9, {\n    name: 'gnd',\n    direction: null,\n    type: PinType.GROUND\n  }],\n  [10, {\n    name: 'gpio uart',\n    direction: null,\n    type: PinType.IO\n  }],\n  [11, {\n    name: 'gpio 17',\n    direction: null,\n    type: PinType.IO\n  }],\n  [12, {\n    name: 'gpio pcm',\n    direction: null,\n    type: PinType.IO\n  }],\n  [13, {\n    name: 'gpio 27',\n    direction: null,\n    type: PinType.IO\n  }],\n  [14, {\n    name: 'gnd',\n    direction: null,\n    type: PinType.GROUND\n  }],\n  [15, {\n    name: 'gpio 22',\n    direction: null,\n    type: PinType.IO\n  }],\n  [16, {\n    name: 'gpio',\n    direction: null,\n    type: PinType.IO\n  }],\n  [17, {\n    name: 'pow3v3',\n    direction: null,\n    type: PinType.POWER\n  }],\n  [18, {\n    name: 'gpio',\n    direction: null,\n    type: PinType.IO\n  }],\n  [19, {\n    name: 'gpio 10',\n    direction: null,\n    type: PinType.IO\n  }],\n  [20, {\n    name: 'gnd',\n    direction: null,\n    type: PinType.IO\n  }],\n  [21, {\n    name: 'gpio 9',\n    direction: null,\n    type: PinType.IO\n  }],\n  [22, {\n    name: 'gpio',\n    direction: null,\n    type: PinType.IO\n  }],\n  [23, {\n    name: 'gpio 11',\n    direction: null,\n    type: PinType.IO\n  }],\n  [24, {\n    name: 'gpio spi',\n    direction: null,\n    type: PinType.IO\n  }],\n  [25, {\n    name: 'gnd',\n    direction: null,\n    type: PinType.GROUND\n  }],\n  [26, {\n    name: 'gpio spi',\n    direction: null,\n    type: PinType.IO\n  }],\n  [27, {\n    name: 'gpio 0',\n    direction: null,\n    type: PinType.IO\n  }],\n  [28, {\n    name: 'gpio i2c',\n    direction: null,\n    type: PinType.IO\n  }],\n  [29, {\n    name: 'gpio 5',\n    direction: null,\n    type: PinType.IO\n  }],\n  [30, {\n    name: 'gnd',\n    direction: null,\n    type: PinType.GROUND\n  }],\n  [31, {\n    name: 'gpio 6',\n    direction: null,\n    type: PinType.IO\n  }],\n  [32, {\n    name: 'gpio',\n    direction: null,\n    type: PinType.IO\n  }],\n  [33, {\n    name: 'gpio 13',\n    direction: null,\n    type: PinType.IO\n  }],\n  [34, {\n    name: 'gnd',\n    direction: null,\n    type: PinType.GROUND\n  }],\n  [35, {\n    name: 'gpio 19',\n    direction: null,\n    type: PinType.IO\n  }],\n  [36, {\n    name: 'gpio',\n    direction: null,\n    type: PinType.IO\n  }],\n  [37, {\n    name: 'gpio 26',\n    direction: null,\n    type: PinType.IO\n  }],\n  [38, {\n    name: 'gpio pcm',\n    direction: null,\n    type: PinType.IO\n  }],\n  [39, {\n    name: 'gnd', direction: null,\n    type: PinType.GROUND\n  }],\n  [40, {\n    name: 'gpio pcm',\n    direction: null,\n    type: PinType.IO\n  }]]);\n\nconst PinIcon = ({ onClick, type }: IconProps & { type: PinType }) => {\n  return (\n    <IconButton onClick={onClick}>\n      <CircleTwoTone color={\n        type === PinType.IO\n          ? 'primary'\n          : type === PinType.POWER\n            ? 'secondary'\n            : 'disabled'\n      }\n      />\n    </IconButton>)\n};\n\nexport default function Pinout({\n  sendHandler,\n  connected,\n  setError,\n}: { sendHandler: SendHandler, connected: boolean, setError: React.Dispatch<React.SetStateAction<Record<string, unknown>>> }) {\n  const [pins, setPins] = useState(gpio);\n  const [chartMeta, setChartMeta] = useState<ChartMeta>({ minTime: 0, maxTime: 0, dataPoints: 0 });\n\n  const data = useContext(GPIOContext);\n\n  const handleSetPinValue = useMemo(() => {\n    return ({ id, value }: { id: number, value: 1 | 0 }) => {\n      const pin = gpio.get(id);\n      if (!pin || pin.type !== 'io') {\n        return;\n      }\n\n      // update the react state\n      gpio.set(id, { ...pin, value });\n      setPins(new Map(gpio));\n\n      // send commmand to write the pin value\n      sendHandler({ id, value, action: 'write' });\n    }\n  }, [sendHandler]);\n  const handleSetDirection = useMemo(() => {\n    return ({ id, newDirection }: { id: number, newDirection: PinIOStateType | null }) => {\n      const pin = gpio.get(id);\n      if (!pin || pin.type !== 'io') {\n        return;\n      }\n      const direction = newDirection ? newDirection : pin.direction;\n      gpio.set(id, { ...pin, direction });\n      setPins(new Map(gpio));\n      sendHandler({ action: 'set', direction, id })\n    }\n  }, [sendHandler]);\n\n  useEffect(() => {\n    let dataPoints = 0;\n    for (const [id, pin] of Array.from(pins.entries())) {\n      pin.data = data.filter(({ id: dataId }) => id === dataId);\n      if (pin.data.length > dataPoints) {\n        dataPoints = pin.data.length;\n      }\n    }\n    const minTime = data.length > 0 ? data[0].date : 0;\n    const maxTime = data.length > 0 ? data[data.length - 1].date : 0;\n    setChartMeta({ dataPoints, minTime, maxTime });\n  }, [data]);\n\n  return (\n    <React.Fragment><TableContainer component={Paper} sx={{ flexGrow: 1 }}>\n      <Table aria-label=\"GPIO Pinout\">\n        <TableBody>\n          {Array.from(pins.entries())\n            .map(([id, pin]) => {\n              return (\n                <TableRow\n                  key={id}\n                  sx={{ '&:last-child td, &:last-child th': { border: 0 } }}\n                >\n                  <TableCell width={1} component=\"td\" sx={{ backgroundColor: 'default', cursor: 'pointer' }}>\n                    <Typography fontSize={10}>{pin.name}</Typography>\n                  </TableCell>\n                  <TableCell width={1}>\n                    {pin.type === 'io' &&\n                    <ToggleButtonGroup\n                      size=\"small\"\n                      color=\"primary\"\n                      value={pin.direction}\n                      exclusive\n                      sx={{ fontSize: 6, height: '10px', lineHeight: '10px' }}\n                      onChange={(event: React.MouseEvent<HTMLElement>, newDirection: PinIOStateType | null) => {\n                        if (!connected) {\n                          setError({ wsHost: true });\n                          return;\n                        }\n                        handleSetDirection({\n                          id,\n                          newDirection,\n                        });\n                      }}\n                    >\n                      <ToggleButton sx={{ fontSize: 8 }} value=\"in\">In</ToggleButton>\n                      <ToggleButton sx={{ fontSize: 8 }} value=\"out\">Out</ToggleButton>\n                    </ToggleButtonGroup>\n                    }\n                  </TableCell>\n                  <TableCell width={1}>\n                    {pin.type === 'io' &&\n                    <ToggleButtonGroup\n                      size=\"small\"\n                      color={pin.direction === 'out' ? 'primary' : 'secondary'}\n                      value={pin.value}\n                      exclusive\n                      sx={{ fontSize: 6, height: '10px', lineHeight: '10px' }}\n                      disabled={pin.direction !== PinIOStateType.OUT}\n                      onChange={(event: React.MouseEvent<HTMLElement>, newValue: 1 | 0 | null) => {\n                        if (!connected) return;\n\n                        const value = newValue === null ? pin.value : newValue;\n                        if (value === undefined) return;\n\n                        handleSetPinValue({\n                          id,\n                          value: value,\n                        });\n                      }}\n                    >\n                      <ToggleButton sx={{ fontSize: 8 }} value={1}>1</ToggleButton>\n                      <ToggleButton sx={{ fontSize: 8 }} value={0}>0</ToggleButton>\n                    </ToggleButtonGroup>\n                    }\n                  </TableCell>\n                  <TableCell width={1} align=\"right\"><PinIcon type={pin.type}/></TableCell>\n                  <TableCell width=\"auto\">\n                    <Paper sx={{ p: 2, display: 'flex', flexDirection: 'column', height: '80px' }}>\n                      <Chart meta={chartMeta} data={pin.data || []}/>\n                    </Paper>\n                  </TableCell>\n                </TableRow>\n              );\n            })}\n        </TableBody>\n      </Table>\n    </TableContainer>\n    </React.Fragment>\n  );\n}\n","import React, { useContext, useEffect, useState } from 'react';\nimport { createTheme, styled, ThemeProvider } from '@mui/material/styles';\nimport CssBaseline from '@mui/material/CssBaseline';\nimport MuiDrawer from '@mui/material/Drawer';\nimport Box from '@mui/material/Box';\nimport MuiAppBar, { AppBarProps as MuiAppBarProps } from '@mui/material/AppBar';\nimport Toolbar from '@mui/material/Toolbar';\nimport List from '@mui/material/List';\nimport Typography from '@mui/material/Typography';\nimport Divider from '@mui/material/Divider';\nimport Container from '@mui/material/Container';\nimport Grid from '@mui/material/Grid';\nimport Paper from '@mui/material/Paper';\nimport Link from '@mui/material/Link';\nimport { Switch, TextField } from '@mui/material';\nimport { CastConnectedRounded } from '@mui/icons-material';\nimport { MainListItems } from './listItems';\nimport PinData from './PinData';\nimport Pinout from './Pinout';\nimport { GPIOContext } from '../App';\nimport { SendHandler } from '../types';\nimport Chart from './Chart';\n\n\nfunction Copyright(props: any) {\n  return (\n    <Typography variant=\"body2\" color=\"text.secondary\" align=\"center\" {...props}>\n      {'Copyright © '}\n      <Link color=\"inherit\" href=\"https://nstrumenta.com/\">\n        nstrumenta\n      </Link>{' '}\n      {new Date().getFullYear()}\n      {'.'}\n    </Typography>\n  );\n}\n\nconst drawerWidth: number = 72;\n\ninterface AppBarProps extends MuiAppBarProps {\n}\n\nconst AppBar = styled(MuiAppBar, {})<AppBarProps>(({ theme }) => ({\n  zIndex: theme.zIndex.drawer + 1,\n  marginLeft: drawerWidth,\n  width: `calc(100% - ${drawerWidth}px)`,\n}));\n\nconst Drawer = styled(MuiDrawer, {})(\n  ({ theme }) => ({\n    '& .MuiDrawer-paper': {\n      position: 'relative',\n      whiteSpace: 'nowrap',\n      width: drawerWidth,\n      boxSizing: 'border-box',\n      overflowX: 'hidden',\n      [theme.breakpoints.up('sm')]: {\n        width: theme.spacing(9),\n      },\n    },\n  }),\n);\n\nconst theme = {\n  dark: createTheme({\n    palette: {\n      mode: 'dark',\n    }\n  }),\n  light: createTheme({\n    palette: {\n      mode: 'light',\n    }\n  })\n}\n\n// const time = new Date(2021, 11, 20, 8, 0, 0);\n\nexport interface OpenViews {\n  pins: boolean,\n  data: boolean,\n}\n\nexport default function Dashboard({\n  wsUrl,\n  setWsUrl,\n  connected,\n  sendHandler,\n}: { sendHandler: SendHandler, wsUrl: string, setWsUrl: (url: string) => void, connected: boolean }) {\n  const [updatedWsUrl, setUpdatedWsUrl] = useState<string>(wsUrl);\n  const [openViews, setOpenViews] = useState<OpenViews>({ pins: true, data: true });\n  const [themePreference, setThemePreference] = useState<'light' | 'dark'>('light');\n  const [error, setError] = useState<Record<string, unknown>>({});\n\n  useEffect(() => {\n    if (error.wsHost === undefined) return;\n\n    setError({ ...error, wsHost: !connected })\n  }, [connected, error.wsHost]);\n\n  const data = useContext(GPIOContext);\n\n  const updateViews = (name: string, state: boolean) => {\n    console.log('updateViews', name, state)\n    setOpenViews({ ...openViews, [name]: state })\n  };\n\n  // TODO: sendHandler is being passed through multiple levels of components; use context and hook\n\n  return (\n    <ThemeProvider theme={theme[themePreference]}>\n      <Box sx={{ display: 'flex' }}>\n        <CssBaseline/>\n        <AppBar position=\"absolute\">\n\n          <Toolbar>\n            <Typography\n              component=\"h1\"\n              variant=\"h6\"\n              color=\"inherit\"\n              noWrap\n              sx={{ flexGrow: 1 }}\n            >\n              Raspberry PI GPIO\n            </Typography>\n            <Typography>Theme</Typography><Switch value={themePreference}\n                                                  onChange={() => setThemePreference((prev) => prev === 'light' ? 'dark' : 'light')}/>\n          </Toolbar>\n        </AppBar>\n        <Drawer variant=\"permanent\">\n          <Toolbar\n            sx={{\n              display: 'flex',\n              alignItems: 'center',\n              justifyContent: 'center',\n              px: [1],\n            }}\n          >\n            <CastConnectedRounded color={connected ? 'secondary' : 'disabled'} sx={{ backgroundColor: 'action' }}/>\n          </Toolbar>\n\n          <Divider/>\n          <List><MainListItems updateViews={updateViews} openViews={openViews}/></List>\n        </Drawer>\n\n        <Box\n          component=\"main\"\n          sx={{\n            flexGrow: 1,\n            height: '100vh',\n            overflow: 'auto',\n          }}\n        >\n          <Toolbar/>\n          <Container maxWidth={false} sx={{ mt: 4, mb: 4 }}>\n            <Grid container spacing={3}>\n              <Grid item xs={6}>\n                <Paper sx={{ padding: 2 }}>\n                  <TextField\n                    variant=\"standard\"\n                    label=\"websocket host\"\n                    onChange={(e) => setUpdatedWsUrl(e.target.value)}\n                    onBlur={() => setWsUrl(updatedWsUrl)} value={updatedWsUrl}\n                    onKeyDown={(e) => {\n                      if (e.key.toLowerCase() === 'enter') setWsUrl(updatedWsUrl);\n                    }}\n                    error={Boolean(error.wsHost)}\n                    fullWidth\n                  />\n                </Paper>\n              </Grid>\n              {/* Pinout */}\n              {openViews.pins && (<Grid item xs={12} height=\"60vh\" sx={{ padding: 2, overflow: 'auto' }}>\n                <Paper\n                  sx={{\n                    p: 2,\n                    display: 'flex',\n                    flexDirection: 'column',\n                    width: '100%',\n                    height: '100%',\n                  }}\n                >\n                  <Pinout\n                    connected={connected}\n                    sendHandler={sendHandler}\n                    setError={setError}\n                  />\n                </Paper>\n              </Grid>)}\n              {/* Recent PinData */}\n              <Grid item xs={12}>\n                <Paper sx={{ p: 2, display: 'flex', flexDirection: 'column' }}>\n                  <PinData data={data}/>\n                </Paper>\n              </Grid>\n\n            </Grid>\n            <Copyright sx={{ pt: 4 }}/>\n          </Container>\n        </Box>\n      </Box>\n    </ThemeProvider>\n  );\n}\n","import * as React from 'react';\n\nimport Dashboard from './dashboard/Dashboard';\nimport Box from '@mui/material/Box';\nimport { NstrumentaClient } from 'nstrumenta';\nimport {\n  PinData,\n  PinTimeSeriesData,\n  CommandMessage,\n  SendHandler,\n} from './types';\nimport { createContext, useEffect, useState } from 'react';\n\nconst CHANNEL = 'gpio';\nconst COMMAND_CHANNEL = 'gpio-command'\n\nconst initialTimeSeriesData: PinTimeSeriesData = [];\n\nexport const GPIOContext = createContext<PinTimeSeriesData>([]);\n\nexport default function App() {\n  const [data, setData] = useState<PinTimeSeriesData>(initialTimeSeriesData);\n  const [wsUrl, setWsUrl] = useState(`ws://${window.location.hostname}:8088`);\n  const [connected, setConnected] = useState(false);\n  const [sendHandler, setSendHandler] = useState<SendHandler>(() => () => (_: CommandMessage) => null);\n\n  // Set up nstrumenta listeners\n  useEffect(() => {\n    try {\n      const nst = new NstrumentaClient({\n        apiKey: 'file?',\n        wsUrl: wsUrl,\n        projectId: 'mapbox-geo',\n      });\n\n      nst.addListener('open', () => {\n        console.log('a connection is made!');\n        setConnected(true);\n        // Now that the connection is open, we can enable sending a message on user input\n        setSendHandler(() => (message: CommandMessage) => {\n            console.log('send message', message);\n            if (!message) {\n              console.log('nothing to send');\n              return;\n            }\n            nst.send(COMMAND_CHANNEL, {\n              action: message.action,\n              id: message.id,\n              value: message.value,\n              direction: message.direction,\n            });\n          }\n        );\n\n        nst.subscribe(CHANNEL, (pinData: PinData) => {\n          console.log(`received message`, pinData);\n          setData((prevData) => prevData.concat(pinData));\n        });\n      });\n\n      nst.addListener('close', () => {\n        console.log('lost ws connection');\n        setConnected(false);\n      });\n\n      nst.init();\n    } catch (e) {\n      console.log(e);\n      console.log(wsUrl);\n      alert('problem with the websocket url!');\n    }\n    // return () => nst.unsubscribe(CHANNEL);\n  }, [wsUrl]);\n\n  return (\n    <GPIOContext.Provider value={data}>\n      <Box>\n        <Dashboard sendHandler={sendHandler} wsUrl={wsUrl} setWsUrl={setWsUrl} connected={connected}/>\n      </Box>\n    </GPIOContext.Provider>\n  );\n}\n","import * as React from 'react';\nimport ReactDOM from 'react-dom';\nimport CssBaseline from '@mui/material/CssBaseline';\nimport App from './App';\n\n// @ts-ignore\nif (module.hot) {\n  // @ts-ignore\n  module.hot.accept();\n}\n\nReactDOM.render(\n  <React.Fragment>\n    {/* CssBaseline kickstart an elegant, consistent, and simple baseline to build upon. */}\n    <CssBaseline />\n    <App />\n  </React.Fragment>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}